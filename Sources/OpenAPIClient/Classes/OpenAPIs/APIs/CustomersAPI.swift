//
// CustomersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal class CustomersAPI {

    /**

     - parameter createCustomerPresetRequestDto: (body)  
     - returns: AuthResponsePayload
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func customersControllerCreatePreset(createCustomerPresetRequestDto: CreateCustomerPresetRequestDto) async throws -> AuthResponsePayload {
        return try await customersControllerCreatePresetWithRequestBuilder(createCustomerPresetRequestDto: createCustomerPresetRequestDto).execute().body
    }

    /**
     - POST /customers/preset
     - Bearer Token:
       - type: http
       - name: bearer
     - parameter createCustomerPresetRequestDto: (body)  
     - returns: RequestBuilder<AuthResponsePayload> 
     */
    internal class func customersControllerCreatePresetWithRequestBuilder(createCustomerPresetRequestDto: CreateCustomerPresetRequestDto) -> RequestBuilder<AuthResponsePayload> {
        let localVariablePath = "/customers/preset"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createCustomerPresetRequestDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthResponsePayload>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - returns: CustomerDto
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func customersControllerGetSelf() async throws -> CustomerDto {
        return try await customersControllerGetSelfWithRequestBuilder().execute().body
    }

    /**
     - GET /customers/me
     - Bearer Token:
       - type: http
       - name: bearer
     - returns: RequestBuilder<CustomerDto> 
     */
    internal class func customersControllerGetSelfWithRequestBuilder() -> RequestBuilder<CustomerDto> {
        let localVariablePath = "/customers/me"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CustomerDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter updateCustomerSelfDto: (body)  
     - returns: CustomerDto
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func customersControllerUpdateSelf(updateCustomerSelfDto: UpdateCustomerSelfDto) async throws -> CustomerDto {
        return try await customersControllerUpdateSelfWithRequestBuilder(updateCustomerSelfDto: updateCustomerSelfDto).execute().body
    }

    /**
     - PATCH /customers/me
     - Bearer Token:
       - type: http
       - name: bearer
     - parameter updateCustomerSelfDto: (body)  
     - returns: RequestBuilder<CustomerDto> 
     */
    internal class func customersControllerUpdateSelfWithRequestBuilder(updateCustomerSelfDto: UpdateCustomerSelfDto) -> RequestBuilder<CustomerDto> {
        let localVariablePath = "/customers/me"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateCustomerSelfDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CustomerDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter createCustomerRequestDto: (body)  
     - returns: AuthResponsePayload
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func customersControllerUpsert(createCustomerRequestDto: CreateCustomerRequestDto) async throws -> AuthResponsePayload {
        return try await customersControllerUpsertWithRequestBuilder(createCustomerRequestDto: createCustomerRequestDto).execute().body
    }

    /**
     - PUT /customers
     - Bearer Token:
       - type: http
       - name: bearer
     - parameter createCustomerRequestDto: (body)  
     - returns: RequestBuilder<AuthResponsePayload> 
     */
    internal class func customersControllerUpsertWithRequestBuilder(createCustomerRequestDto: CreateCustomerRequestDto) -> RequestBuilder<AuthResponsePayload> {
        let localVariablePath = "/customers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createCustomerRequestDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthResponsePayload>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
